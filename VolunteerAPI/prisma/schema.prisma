generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id            Int           @id @default(autoincrement())
  name          String
  tags          String[]      @default([])
  location      String
  opportunities Opportunity[]
}

model Opportunity {
  id               Int          @id @default(autoincrement())
  name             String
  tags             String[]     @default([])
  description      String?
  date             DateTime?
  createdAt        DateTime     @default(now())
  skills           String[]     @default([])
  imageUrl         String?
  volunteersNeeded Int?
  status           String       @default("active")
  points           Int          @default(0)
  organizationId   Int
  location         String?
  requirements     String[]     @default([])
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  savedByUsers     User[]       @relation("SavedOpportunities")
  users            User[]       @relation("UserOpportunities")
}

model User {
  id                     Int             @id @default(autoincrement())
  username               String          @unique
  skills                 String[]        @default([])
  training               String[]        @default([])
  createdAt              DateTime        @default(now())
  location               String?
  points                 Int             @default(0)
  age                    Int?
  avatarUrl              String?         @default("https://i.ibb.co/rf6XN61Q/plant.png")
  level                  Int             @default(1)
  name                   String?
  interests              String[]        @default([])
  firebaseUid            String?         @unique
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  savedOpportunities     Opportunity[]   @relation("SavedOpportunities")
  badges                 Badge[]         @relation("UserBadges")
  User_A                 User[]          @relation("UserFriends")
  User_B                 User[]          @relation("UserFriends")
  opportunities          Opportunity[]   @relation("UserOpportunities")
}

model Chat {
  id             Int      @id @default(autoincrement())
  conversationId String
  prompt         String
  response       String
  createdAt      DateTime @default(now())
}

model Badge {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  imageUrl    String?
  users       User[]  @relation("UserBadges")
}

model FriendRequest {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  receiver   User     @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}
